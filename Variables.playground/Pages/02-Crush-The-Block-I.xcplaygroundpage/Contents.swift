/*:
 ![Make School Banner](./swift_banner.png)
 # ブロックつぶし

 _Crush the Block_というマイクロゲームをします。黄色いブロックの位置を変えて、白いブロックの上に落とします。


 繰り返しになりますが、Playgroundsではコードと指示が同じファイルにあります。つまり、説明しながら君がコードを書いてチャレンジに立ち向かうのを応援できるということ。さあ、はじめてのコードを見てみましょう！。
*/

var distanceFromLeft: Int = 50

/*:

 ## はじめてのコード

 上の行が見えますか？`distanceFromLeft`という変数を新しく作り、50という値を保存しています。チャレンジが完了したら、この構文について説明します。

 右手のビジュアルを見ると、落ちるブロックの中心から左端までの距離は50単位です。ブロックはマイクロゲームのスタートと同時に落ちはじめます。

 `distanceFromLeft`の値を160に修正してみましょう。

 - callout(やってみよう): 次のコードを入力して保存された値を修正しよう。`distanceFromLeft = 160`

*/



/*:

 - メモ: コードを書くときはそのままそっくり真似することが大事です！スペルや大文字、空欄まで正確に書かなければコンピュータが混乱してしまいます。


 ## 変数で実験

 マイクロゲームが再スタートし、上のブロックの位置が変わっていれば成功！これでブロックの位置は左端から160単位となりました。おめでとう！初めてのコードが書けましたね！

 - 実験: 何回か値を修正して、画面の左端からブロックの中心までの距離が必ず`distanceFromLeft`の値となっていることを確認してみましょう。

 これも試してみよう:
 * マイナスの値を使うとどうなる?
 * 320より大きい値を使うとどうなる?
 * 計算式はどうかな？`distanceFromLeft = 25 + 50`と入れてみましょう。


 - 重要: 実験をしていると、コードはPlaygroundの上から下へと順番に実行されていることに気が付きましたか？distanceFromLeftを何度修正しても、最後もしくは最も下にある値が使われるのです。


*/



/*:

 ## ブロックをつぶす！

 慣れてきたところで、上のブロックを、地面にあるブロックの真上にくるように動かしてみましょう。260単位でちょうどよいはずです！

 - callout(やってみよう): 次のコードを入力してみよう `distanceFromLeft = 260`

*/



/*:

 やったあ！ひとつめのチャレンジをクリアしましたね！ :)

 ## 何がおきたの？

 さきほどのチャレンジでは、まずは1行目で変数を設定して値を当てはめましたね。そして他の行でその値の修正( "re-assign it")をしました。

 この説明では疑問が残るかもしれません。変数って結局なんなの？設定するってどういうこと？

 コードを書くときは、’160’や’270’という値は「変数」として保存することができます。後でその値を使いたい時に簡単に引っ張ってこられるように、変数はニックネームのような役目を持ちます。
 
 変数はある値を保管する、スプレッドシートのセルに似たものです。変数を設定する時には、セルに値を入力するのと同じように、その変数が保管する値を入力します。

 ## 変数を設定する

 変数は`var`というキーワードで作ります。新しく変数を設定する場合、保管するデータタイプを指定しなければなりません。リンゴやみかんが果物の種類であるように、データタイプとはデータの種類のことです。

 Swiftにはたくさんのデータタイプがあります。今回の練習では次のタイプを使います。

 - `Int` は整数
    - `0`, `77`, `-42`
 - `Double` は少数
    - `3.14`, `0.375`, `-1.337`
 - `String` は文字列
    - `"This is a String example!"`, `"Catch 22"`, `"e"`

 先程の練習では`Int`データ (整数)しか使いませんでしたね。ところで、コンピューターは`distanceFromLeft`のデータタイプは整数にするということを、どのように分かったのでしょう。

 - 重要: `distanceFromLeft`は次のように書きました。

      `var distanceFromLeft: Int = 50`

   `var`は変数を設定する時のキーワードであることは既に学びました。変数の名前は`distanceFromLeft`であり、もともとの値は50でしたね。ここまできれば、変数の構文は`var 変数名: データタイプ = 値`であることもお分かりでしょう。`var`と`:` と`=` は変わりません。一方で変数名、データタイプと値は、コードの内容によって変わります。

 ## 変数に名前を付ける

 変数の面白いところは、一見普通の言葉のような名前を付けられるところです。後から見てもその変数がどういう意味なのかがとても分かりやすくなっています。このネーミングを上手くすれば、初めて見る人でも変数の意味を理解することができます。
 
 例えば、`distanceFromLeft`はその名の通り左端からの距離を表します。もっと分かりやすくするならば、こんな名前にもできるんです。’distanceFromTheLeftSideOfTheScreenThatTheCenterOfTheTopBlockWillAppear`でもこれだと長すぎるので、意味が伝わるように短縮しました。

 プログラミング言語によって変数のネーミングのルールが異なります。Swiftでは:
 - アルファベットではじめる
 - 英数字と特定の記号が使える
 - 空欄は使わない

 `distanceFromLeft`は"Camel Casing"という一般的なネーミング規則に従い、単語の1文字目(最初の単語以外)は大文字を使っています。(空欄は使えず、アンダーバーは入力が手間なため、このような書き方をします)

 ## 変数の値の修正

 既に設定された変数を修正するには、左に変数の名前を入力し(ここでは`distanceFromLeft`)、等記号("the assignment operator"(代入演算子)とも呼ばれる)で繋げて右に設定したい値を入力します。(もともと`50`でしたが、変更可能です)

 `distanceFromLeft = 50`という分は「’distanceFromLeft’という変数に50という値を設定する」と読めるのです。

 ## この変数はどうして特別なのか？

 ところで、変数の値を修正するとゲームの中のものが動いたのはどうしてでしょうか?これは、ゲームのコードがdistanceFromLeftの値を使ってロードする時にブロックの位置を定めているからです。このコードは今は理解しなくても良いものですが、気になる方はPlaygroundページの下を見てみてください。

 コードに`distanceFromLeft`という変数が含まれているのが分かりますか？その何行か前に、私たちが設定したものと同じです。では、`let results`ではじまる行の後に変数を設定するとどうなるでしょう？

 - callout(次へ): ふう、ここまですごい情報量でしたね。チャレンジを続けてここで学んだコンセプトを応用してみましょう。”Next”ボタンを押してください！


*/
//: [Previous](@previous) | [Next](@next)






































//: This is special code required to make the mini-game work. You do NOT need to understand it right now.
import Foundation
let results = CrushTheBlockIScene.setup(crusherPosition: distanceFromLeft)
import PlaygroundSupport
PlaygroundPage.current.liveView = results
