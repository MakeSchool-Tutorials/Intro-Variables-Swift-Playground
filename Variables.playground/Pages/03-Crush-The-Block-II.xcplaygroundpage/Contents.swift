/*:
 ![Make School Banner](./swift_banner.png)
 # ブロックくずし II

 次のチャレンジに挑戦しよう！このPlaygroundでは、ブロックくずしの続編「ブロックくずしII」で遊びます。

 今回は、ブロックをくずすためには’force’と呼ばれる変数を編集して左のブロックをジャンプさせて右のブロックにあてなければなりません。’force’とは、右に向かってかけるエネルギーのことで、ちょうど良い力加減を見つけなければなりません。強すぎると飛びすぎますし、弱すぎると溝に落ちてしまいます。

 まずは’0’を’10’に修正してみましょう。違いが分かりずらいかもしれませんが、ちょうど良いところまで少しずつ大きな値に修正していきます。

*/

let force: Int = 0

/*:

 できたかな？やったあ！

 このコードと、さっきの練習のコードとの違いに気が付きましたか？ここでは`var`の代わりに`let`が使われていますね。

 `var`はSwiftに「変数を設定しろ」と指示を出すキーワードでした。さっきの練習では`Int`というデータタイプで50という値を設定しました。(`var distanceFromLeft: Int = 50`　という式でしたね) 練習ではvarというキーワードを変えずに変数を修正しました。(`distanceFromLeft = 160`といった具合に)`var` やデータタイプ(`Int`)は新しい変数が登場する時だけに必要なのです。

 では`let`はどういう意味でしょう？実験をしながら解明できるでしょうか...

 `force = 0`と入力してforceをゼロに直しましょう。

*/



/*:

 ![](imgs/let_error.png)

 ## 全部めちゃくちゃだ！

 焦る必要はないです。コンパイルエラーを起こしただけです。コンピューターは嫌いなコードを赤色で示してくれます。

 でもコンピューターはどうしてこの行が嫌いなのでしょうか？幸いなことに、コンピューターは間違っている点とその直し方の提案を、丁寧に示してくれます。(赤色の八角形をクリックすると表示されます)

 エラーが起きたら、だいたいの場合エラーメッセージを読むと原因が分かります。ここでは:

 `Cannot assign to value: 'force' is a 'let' constant`('force' は 'let'定数であるため、値を設定できません)

 その下には、直し方のアドバイスを示してくれていますね。('let'を’'var'に変更してミュータブル(変更可能)にしてください)

 ## 'let' 定数

 `var` の代わりに’let’というキーワードを使うと変数ではなく定数が設定されます。定数は、(変数を同じように) 後で必要となる特定の値を保管するために使われます。しかし定数は変更がききません。もともと設定した値から変えられないのです。

 後で変えることのない値は、`let`を使い定数として保管しておきます。逆に、後で変えるような値であれば`var`を使い変数として設定しておきます。つまり変数はミュータブル(変更可能)な値なのです。一方の定数はイミュータブル(変更不可)なわけです。

 - note; 出来る限り`var`ではなく`let`を使いましょう。`let`を使えるところで’var’を使っていると、Swiftから怒られることもあります。

 */
/*:
  - 重要：Playgroundはエラー(赤い印)がある状態ではコードを実行できません。先程の`force = 0`はいらないので削除しましょう。
*/
//: [Previous](@previous) | [Next](@next)






































//:This is special code required to make the mini-game work. You do NOT need to understand it right now.
import PlaygroundSupport
let results = CrushTheBlockIIScene.setup(crusherVelocity: force)
PlaygroundPage.current.liveView = results
